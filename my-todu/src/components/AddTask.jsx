import * as React from 'react';

// import Select from '@mui/material/Select';
import { useState } from 'react';
import Sidebar from './Sidebar';
import ListTask from './ListTask';
import CompletedTask from './CompletedTask';
import { useDispatch, useSelector } from 'react-redux';
import { addTask ,completeTask} from '../utils/tuduSlice';
import Nav from './Nav';
export default function AddTask() {
  const [isOpen, setIsOpen] = useState(false);
   const [taskInput, setTaskInput] = useState([]);
//    const [completedTasks, setCompletedTasks] = useState([]);

  const dispatch = useDispatch();
  const tasks = useSelector((state) => state.tudu.tasks);
  const completedTasks = useSelector((state) => state.tudu.completedTasks);


  const handleDropdownChange = (e) => {
    setIsOpen(e.target.value === 'open');
  };

  const handleAddTask = () => {

if (taskInput.trim()) {
    dispatch(addTask(taskInput));
    setTaskInput('');
}
  }
  const handleCompleteTask = (task) => {
    dispatch(completeTask(task));
}; 
const theme = useSelector((state) => state.toggle.theme);

  return (
    

<>
     
      <div className={` w-full -mt-10   ${theme === 'dark' ? 'bg-[#242424] text-white' : 'bg-[#FBFDFC] text-black'}`}>
    
      <div className=' w-full    h-screen  '>
    <div className='w-full h-8 flex items-center'>

    <p className={`font-medium text-sm leading-4  ${theme === 'dark' ? ' text-[#97F69BB5]' : 'text-[#142E159E]'}`}>To Do</p>
    <svg 
      className="w-6 h-6  stroke-current fill-[#142E15] dark:text-[#97F69BB5] ">

   <path 
d="M9.86274 9C8.65111 9 8.04529 9 7.76477 9.23959C7.52136 9.44749 7.39218 9.75934 7.4173 10.0785C7.44624 10.4462 7.87462 10.8746 8.73137 11.7314L10.8686 13.8686C11.2646 14.2646 11.4627 14.4627 11.691 14.5368C11.8918 14.6021 12.1082 14.6021 12.309 14.5368C12.5373 14.4627 12.7354 14.2646 13.1314 13.8686L15.2686 11.7314C16.1254 10.8746 16.5538 10.4462 16.5827 10.0785C16.6078 9.75934 16.4786 9.44749 16.2352 9.23959C15.9547 9 15.3489 9 14.1373 9H9.86274Z" 
 />
</svg>

    </div>

    <div className='w-full p-2 h-44 border shadow-sm border-[#496E4B33] bg-gradient-to-t from-[rgba(208,255,210,0.1)] to-[rgba(53,121,55,0.1)]'>

<input type="text"
    className='w-full h-10 mt-10 outline-none bo'
    placeholder='Add a Task'
    value={taskInput}  
            onChange={(e) => setTaskInput(e.target.value)}
/>

<div className='flex justify-between w-full mt-10'>
    <div className='flex gap-10 '>
        {/* icon */}
        <svg 
          className="w-6 h-6  stroke-current fill-none dark:text-white">
 
        {/* width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"> */}
<g clip-path="url(#clip0_5_2269)">
<path d="M21.6734 18.5534C21.0306 17.9802 20.4677 17.3232 20.0001 16.6C19.4891 15.6019 19.1831 14.5116 19.1001 13.3934V10.1C19.1045 8.34376 18.4675 6.64633 17.3086 5.32666C16.1498 4.007 14.5489 3.15592 12.8068 2.93335V2.07335C12.8068 1.83731 12.713 1.61093 12.5461 1.44402C12.3792 1.27712 12.1528 1.18335 11.9168 1.18335C11.6807 1.18335 11.4544 1.27712 11.2875 1.44402C11.1205 1.61093 11.0268 1.83731 11.0268 2.07335V2.94668C9.30029 3.1853 7.71876 4.04152 6.57513 5.35675C5.4315 6.67199 4.80327 8.35711 4.80678 10.1V13.3934C4.72382 14.5116 4.4178 15.6019 3.90678 16.6C3.44737 17.3216 2.89358 17.9785 2.26011 18.5534C2.189 18.6158 2.13201 18.6927 2.09293 18.7789C2.05384 18.8651 2.03357 18.9587 2.03345 19.0534V19.96C2.03345 20.1368 2.10369 20.3064 2.22871 20.4314C2.35373 20.5564 2.5233 20.6267 2.70011 20.6267H21.2334C21.4103 20.6267 21.5798 20.5564 21.7049 20.4314C21.8299 20.3064 21.9001 20.1368 21.9001 19.96V19.0534C21.9 18.9587 21.8797 18.8651 21.8406 18.7789C21.8016 18.6927 21.7446 18.6158 21.6734 18.5534ZM3.42011 19.2934C4.04024 18.694 4.58636 18.0226 5.04678 17.2934C5.69064 16.088 6.0659 14.7575 6.14678 13.3934V10.1C6.12034 9.31871 6.2514 8.54007 6.53214 7.81046C6.81289 7.08086 7.23759 6.41521 7.78095 5.85315C8.3243 5.2911 8.97521 4.84413 9.6949 4.53887C10.4146 4.2336 11.1884 4.07629 11.9701 4.07629C12.7519 4.07629 13.5256 4.2336 14.2453 4.53887C14.965 4.84413 15.6159 5.2911 16.1593 5.85315C16.7026 6.41521 17.1273 7.08086 17.4081 7.81046C17.6888 8.54007 17.8199 9.31871 17.7934 10.1V13.3934C17.8743 14.7575 18.2496 16.088 18.8934 17.2934C19.3539 18.0226 19.9 18.694 20.5201 19.2934H3.42011Z" 
fill="#1B281B"/>
<path d="M12 22.8533C12.42 22.8436 12.823 22.6858 13.1378 22.4076C13.4525 22.1294 13.6588 21.7489 13.72 21.3333H10.2134C10.2764 21.7602 10.4923 22.1497 10.8209 22.4293C11.1496 22.7089 11.5686 22.8595 12 22.8533Z" 
fill="#1B281B"/>
</g>
<defs>
<clipPath id="clip0_5_2269">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>
</svg>

<svg 
  className="w-6 h-6  stroke-current fill-none dark:text-white">
 
{/* width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"> */}
<g clip-path="url(#clip0_5_2273)">
<path d="M16.5001 8.19901V6.00001H7.50008C6.47897 5.99991 5.47473 6.26041 4.58243 6.75685C3.69012 7.25329 2.93928 7.96924 2.40097 8.83693C1.86267 9.70462 1.55471 10.6953 1.50626 11.7153C1.4578 12.7352 1.67045 13.7507 2.12408 14.6655C2.16801 14.7538 2.19412 14.8498 2.20093 14.9481C2.20775 15.0465 2.19512 15.1452 2.16378 15.2387C2.13244 15.3321 2.083 15.4185 2.01828 15.4928C1.95356 15.5672 1.87483 15.6281 1.78658 15.672C1.69833 15.7159 1.60229 15.742 1.50395 15.7489C1.40561 15.7557 1.30689 15.743 1.21343 15.7117C1.11997 15.6804 1.03359 15.6309 0.95924 15.5662C0.884885 15.5015 0.824006 15.4228 0.780079 15.3345C0.212439 14.1909 -0.0538583 12.9213 0.00640834 11.646C0.066675 10.3707 0.451511 9.13184 1.12447 8.04685C1.79742 6.96186 2.73621 6.06663 3.85193 5.44594C4.96764 4.82525 6.22334 4.49966 7.50008 4.50001H16.5001V2.30101C16.5001 2.22975 16.5204 2.15998 16.5587 2.09986C16.5969 2.03974 16.6515 1.99176 16.716 1.96154C16.7806 1.93132 16.8524 1.92011 16.923 1.92923C16.9937 1.93834 17.0603 1.9674 17.1151 2.01301L20.6551 4.96201C20.8351 5.11201 20.8351 5.38801 20.6551 5.53801L17.1151 8.48701C17.0603 8.53261 16.9937 8.56167 16.923 8.57079C16.8524 8.5799 16.7806 8.56869 16.716 8.53847C16.6515 8.50825 16.5969 8.46028 16.5587 8.40016C16.5204 8.34004 16.5001 8.27026 16.5001 8.19901ZM22.2151 8.32801C22.3931 8.23959 22.599 8.22547 22.7874 8.28875C22.9759 8.35204 23.1315 8.48755 23.2201 8.66551C23.7877 9.80912 24.054 11.0787 23.9937 12.354C23.9335 13.6294 23.5486 14.8682 22.8757 15.9532C22.2027 17.0382 21.2639 17.9334 20.1482 18.5541C19.0325 19.1748 17.7768 19.5004 16.5001 19.5H7.50008V21.699C7.50005 21.7703 7.47972 21.84 7.44148 21.9002C7.40323 21.9603 7.34864 22.0083 7.28411 22.0385C7.21958 22.0687 7.14778 22.0799 7.07711 22.0708C7.00644 22.0617 6.93983 22.0326 6.88508 21.987L3.34508 19.038C3.30288 19.0028 3.26892 18.9588 3.24562 18.909C3.22232 18.8592 3.21025 18.805 3.21025 18.75C3.21025 18.6951 3.22232 18.6408 3.24562 18.591C3.26892 18.5412 3.30288 18.4972 3.34508 18.462L6.88508 15.513C6.93983 15.4674 7.00644 15.4383 7.07711 15.4292C7.14778 15.4201 7.21958 15.4313 7.28411 15.4615C7.34864 15.4918 7.40323 15.5397 7.44148 15.5999C7.47972 15.66 7.50005 15.7298 7.50008 15.801V18H16.5001C17.5213 18.0004 18.5257 17.74 19.4182 17.2437C20.3108 16.7474 21.0618 16.0315 21.6003 15.1637C22.1388 14.296 22.4469 13.3052 22.4954 12.2851C22.5439 11.265 22.3313 10.2494 21.8776 9.33451C21.7892 9.15646 21.775 8.9506 21.8383 8.76216C21.9016 8.57371 22.0371 8.41659 22.2151 8.32801Z" fill="#1B281B"/>
</g>
<defs>
<clipPath id="clip0_5_2273">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>
</svg>

<svg
  className="w-6 h-6  stroke-current fill-none dark:text-white">
 
 {/* width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"> */}
<path d="M15 4V2M15 4V6M15 4H10.5M3 10V19C3 19.5304 3.21071 20.0391 3.58579 20.4142C3.96086 20.7893 4.46957 21 5 21H19C19.5304 21 20.0391 20.7893 20.4142 20.4142C20.7893 20.0391 21 19.5304 21 19V10M3 10H21M3 10V6C3 5.46957 3.21071 4.96086 3.58579 4.58579C3.96086 4.21071 4.46957 4 5 4H7M21 10V6C21 5.46957 20.7893 4.96086 20.4142 4.58579C20.0391 4.21071 19.5304 4 19 4H18.5M7 2V6" 
 stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>


    </div>
    <div className='bg-[#35793729] w-28 h-9 flex justify-center items-center rounded-lg'>
        {/* button add */}
        <button
            onClick={handleAddTask} className='font-medium text-sm leading-5 text-[#357937] '>
        ADD TASK
        </button>
    </div>
</div>

    </div>
   <div className="flex flex-wrap gap-4 w-full">
   {tasks.map((task, index) => (
                    <ListTask
                        key={index}
                        text={task}
                        onComplete={handleCompleteTask}
                    />
                ))}

   </div>
   
   <p className='font-normal text-sm leading-5 pt-10'>Completed</p>
   <div className='mt-5'>
   {completedTasks.map((task, index) => (
                    <CompletedTask key={index} text={task} />
                ))}
</div>
    </div>
   </div> 
</>

    // </div>
  );
}
